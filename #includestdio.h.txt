#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef struct node
{
 char name[20];
 char id[20];
 char group[20];
 int unit;
 struct node *next;
}NODE;
int a[10];
void greet()
{
 printf("\n\n");
 printf("\t\t *******************************************\n");
 printf("\t\t \n");
 printf("\t\t \n");
 printf("\t\t ------------------------------------------------------------ \n");
 printf("\t\t WELCOME TO BLOOD BANK \n");
 printf("\t\t ------------------------------------------------------------ \n");
 printf("\t\t \n");
printf("\t\t \n");
 printf("\t\t ******************************************\n");
 printf("\n\n");
}
NODE* insert(NODE *first)
{
 NODE *newnode,*temp,*tem;
 char id[20];
 int u;
printf("\n\t\tEnter donar details\n");
printf("\t\tDoner id: ");
 scanf("%s",id);
 tem=first;
 while(tem!=NULL&&(strcmp(tem->id,id)!=0))
 tem=tem->next;
 if(tem==NULL)
 {
 newnode=(NODE*)malloc(sizeof(NODE));
 printf("\t\tName: ");
 scanf("%s",newnode->name);
 strcpy(newnode->id,id);
 printf("\t\tblood group: ");
 scanf("%s",newnode->group);
 printf("\t\tNo of units donated: ");
 scanf("%d",&newnode->unit);
 newnode->next=NULL;
 if(first==NULL)
 first=newnode;
 else
 {
 temp=first;
 while(temp->next!=NULL)
 temp=temp->next;
 temp->next=newnode;
 }
 }
 else
 {
 printf("\n\t\tName\tID\tunits donated\n");
 printf("\t\t%s\t%s\t%d\n",tem->name,tem->id,tem->unit);
 printf("\t\tenter no of units ");
 scanf("%d",&u);
 tem->unit=tem->unit+u;
 }
 return first;
}
int* sum(NODE *first,int a[10])
{
NODE *temp=first;
 if(a==0)
 printf("\n\t\t Empty list\n");
 while(temp!=0)
 {
 if(strcmp(temp->group,"A+")==0)
 a[0]=a[0]+temp->unit;
 else if(strcmp(temp->group,"A-")==0)
 a[1]=a[1]+temp->unit;
 else if(strcmp(temp->group,"B+")==0)
 a[2]=a[2]+temp->unit;
 else if(strcmp(temp->group,"B-")==0)
 a[3]=a[3]+temp->unit;
 else if(strcmp(temp->group,"AB+")==0)
 a[4]=a[4]+temp->unit;
 else if(strcmp(temp->group,"AB-")==0)
 a[5]=a[5]+temp->unit;
 else if(strcmp(temp->group,"O+")==0)
 a[6]=a[6]+temp->unit;
 else
 a[7]=a[7]+temp->unit;
 temp=temp->next;
 }
 if(a[0]>0)
 printf("\n\t\tBlood group A+ = %d unit\n",a[0]);
 if(a[1]>0)
 printf("\t\tBlood group A- = %d unit\n",a[1]);
 if(a[2]>0)
 printf("\t\tBlood group B+ = %d unit\n",a[2]);
 if(a[3]>0)
printf("\t\tBlood group B- = %d unit\n",a[3]);
 if(a[4]>0)
 printf("\t\tBlood group AB+ = %d unit\n",a[4]);
 if(a[5]>0)
 printf("\t\tBlood group AB- = %d unit\n",a[5]);
 if(a[6]>0)
 printf("\t\tBlood group O+ = %d unit\n",a[6]);
 if(a[7]>0)
 printf("\t\tBlood group O- = %d unit\n",a[7]);
return a;
}
int* req(int a[10])
{
 char group[20];
int unit;
 printf("\n\t\tEnter group type andno of units ");
scanf("%s%d",group,&unit);
 if(strcmp(group,"A+")==0)
 {
if(a[0]>0&&a[0]>unit)
 {
 a[0]=a[0]-unit;
 printf("\n\t\tremaining A+ %d units\n",a[0]);
 }
 else if(a[0]<unit)
 printf("\n\t\tavailable only %d units\n",a[0]);
 else
 printf("\n\t\tnot available\n");
}
 else if(strcmp(group,"A-")==0)
 {
if(a[1]>0&&a[1]>unit)
{
a[1]=a[1]-unit;
 printf("\n\t\tremaining A- %d units\n",a[1]);
 }
 else if(a[1]<unit)
 printf("\n\t\tavailable only %d units\n",a[1]);
 else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"B+")==0)
 {
 if(a[2]>0&&a[2]>unit)
 {
 a[2]=a[2]-unit;
 printf("\n\t\tremaining B+ %d units\n",a[2]);
}
 else if(a[2]<unit)
 printf("\n\t\tavailable only %d units\n",a[2]);
 else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"B-")==0)
{ if(a[3]>0&&a[3]>unit)
 {
 a[3]=a[3]-unit;
 printf("\n\t\tremaining B- %d units\n",a[3]);
 }
 else if(a[3]<unit)
 printf("\n\t\tavailable only %d units\n",a[3]);
else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"AB+")==0)
 {
if(a[4]>0&&a[4]>unit)
{
 a[4]=a[4]-unit;
 printf("\n\t\tremaining AB+ %d units\n",a[4]);
 }
 else if(a[4]<unit)
 printf("\n\t\tavailable only %d units\n",a[4]);
 else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"AB-")==0)
 {
if(a[5]>0&&a[5]>unit)
 {
 a[5]=a[5]-unit;
 printf("\n\t\tremaining AB- %d units\n",a[5]);
 }
 else if(a[5]<unit)
 printf("\n\t\tavailable only %d units\n",a[5]);
 else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"O+")==0)
 {
if(a[6]>0&&a[6]>unit)
 {
 a[6]=a[6]-unit;
 printf("\n\t\tremaining O+ %d units\n",a[6]);
 }
 else if(a[6]<unit)
 printf("\n\t\tavailable only %d units\n",a[6]);
 else
 printf("\n\t\tnot available\n");
 }
 else if(strcmp(group,"O-")==0)
 {
 if(a[7]>0&&a[7]>unit)
{
 a[7]=a[7]-unit;
 printf("\n\t\tremaining O- %d units\n",a[7]);
 }
 else if(a[7]<unit)
 printf("\n\t\tavailable only %d units\n",a[7]);
 else
 printf("\n\t\tnot available\n");
 }
 return a;
}
void display(NODE *first)
{
 if(first==NULL)
 {
 printf("\n\t\tEmpty list\n");
 return;
 }
 printf("\n\t\tName\tID\tBlood group\tunits donated\n");
 while(first!=NULL)
 {
 printf("\t\t%s\t%s\t%s\t\t%d\n",first->name,first->id,first->group,first->unit);
first=first->next;
 }
}
void display_p(NODE *first)
{
 NODE *temp;
 char group[20];
 if(first==NULL||a==0)
 printf("\n\t\tempty list\n");
 else
 {
 printf("\t\tenter blood group ");
scanf("%s",group);
 printf("\n\t\tName\tID\tunits donated\n");
 temp=first;
 while(temp!=NULL)
 {
 if(strcmp(temp->group,group)==0)
 printf("\t\t%s\t%s\t%d\n",temp->name,temp->id,temp->unit);
 temp=temp->next;
 }
 }
}
int delete(NODE *first,int a[])
{
 NODE *prev,*temp;
 char id[10],gp[20];
 int n;
 if(first==NULL||a==0)
 {
 printf("\n\t\tEMPTY LIST\n");
 return;
 }
 printf("\n\t\tenter the id: ");
 scanf("%s",id);
 temp=first;
 while(temp!=NULL&&strcmp(temp->id,id)!=0)
 {
 prev=temp;
 temp=temp->next;
 }
 if(temp==NULL)
 printf("\n\t\tdoner id %s not existing\n",id);
 else
 {
 printf("\n\t\tdoner id %s is deleted\n",id);
n=temp->unit;
 strcpy(gp,temp->group);
 prev->next=temp->next;
 if(strcmp(gp,"A+")==0)
 {
 a[0]=a[0]-n;
 printf("\n\t\tactual available A+ %d units\n",a[0]);
 }
 if(strcmp(gp,"A-")==0)
 {
 a[1]=a[1]-n;
 printf("\n\t\tnow available A- %d units\n",a[1]);
 }
 if(strcmp(gp,"B+")==0)
 {
 a[2]=a[2]-n;
 printf("\n\t\tnow available B+ %d units\n",a[2]);
 }
 if(strcmp(gp,"B-")==0)
 {
 a[3]=a[3]-n;
 printf("\n\t\tnow available B- %d units\n",a[3]);
 }
 if(strcmp(gp,"AB+")==0)
 {
 a[4]=a[4]-n;
 printf("\n\t\tnow available AB+ %d units\n",a[4]);
 }
 if(strcmp(gp,"AB-")==0)
 {
 a[5]=a[5]-n;
 printf("\n\t\tnow available AB- %d units\n",a[5]);
 }
 if(strcmp(gp,"O+")==0)
{
 a[6]=a[6]-n;
 printf("\n\t\tnow available O+ %d units\n",a[6]);
 }
 if(strcmp(gp,"O-")==0)
 {
 a[7]=a[7]-n;
 printf("\n\t\tnow available O- %d units\n",a[7]);
 }
 free(temp);
 }
 return;
}
int main()
{
 NODE *first=NULL;
 int a[10]={0};
int choice;
greet();
 while(1)
 {
printf("\n\n\t\t1 Add doner\n\t\t2 doners details\n\t\t3 particular group
doners\n\t\t4 blood available\n\t\t5 request\n\t\t6 remove a doner\n\t\t7
exit\n");
 printf("\n\t\tEnter your choice ");
 scanf("%d",&choice);
 switch(choice)
 {
 case 1:first=insert(first);
 break;
 case 2:display(first);
 break;
 case 3:display_p(first);
 break;
 case 4:sum(first,a);
break;
 case 5:req(a);
 break;
 case 6:delete(first,a);
 break;
 case 7:exit(0);
 default:printf("\n\t\t Invalid choice \n");
 }
 }
 return 0;
}